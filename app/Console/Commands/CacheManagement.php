<?php

namespace App\Console\Commands;

use App\Services\CacheService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;

class CacheManagement extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'cache:manage 
                          {action : Acci√≥n a realizar (warmup, flush, info, stats)}
                          {--user-id= : ID de usuario para operaciones espec√≠ficas}
                          {--document-id= : ID de documento para operaciones espec√≠ficas}
                          {--pattern= : Patr√≥n para operaciones de limpieza}';

    /**
     * The console command description.
     */
    protected $description = 'Gestionar sistema de cach√© de ArchiveyCloud';

    private CacheService $cacheService;

    public function __construct(CacheService $cacheService)
    {
        parent::__construct();
        $this->cacheService = $cacheService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $action = $this->argument('action');

        return match ($action) {
            'warmup' => $this->warmupCache(),
            'flush' => $this->flushCache(),
            'info' => $this->showCacheInfo(),
            'stats' => $this->showCacheStats(),
            'forget-user' => $this->forgetUserCache(),
            'forget-document' => $this->forgetDocumentCache(),
            'forget-pattern' => $this->forgetByPattern(),
            default => $this->error("Acci√≥n '{$action}' no v√°lida. Use: warmup, flush, info, stats, forget-user, forget-document, forget-pattern")
        };
    }

    private function warmupCache(): int
    {
        $this->info('üî• Precalentando cach√©s cr√≠ticos...');
        $this->newLine();

        $startTime = microtime(true);
        $results = $this->cacheService->warmupCriticalCaches();
        $endTime = microtime(true);

        if (isset($results['error'])) {
            $this->error('‚ùå Error durante el precalentamiento: ' . $results['error']);
            return Command::FAILURE;
        }

        $this->info('‚úÖ Cach√©s precalentados exitosamente');
        $this->line('   Tiempo: ' . round(($endTime - $startTime) * 1000, 2) . 'ms');
        $this->newLine();

        // Mostrar resumen
        $this->table(
            ['Cach√©', 'Estado'],
            [
                ['Estad√≠sticas del sistema', isset($results['system_statistics']) ? '‚úÖ Cargado' : '‚ùå Error'],
                ['Datos TRD', isset($results['trd_data']) ? '‚úÖ Cargado' : '‚ùå Error'],
                ['Servicios externos', isset($results['external_services']) ? '‚úÖ Cargado' : '‚ùå Error'],
            ]
        );

        return Command::SUCCESS;
    }

    private function flushCache(): int
    {
        if (!$this->confirm('¬øEst√°s seguro de que deseas limpiar TODO el cach√©?')) {
            $this->info('Operaci√≥n cancelada.');
            return Command::SUCCESS;
        }

        $this->info('üßπ Limpiando todo el cach√©...');

        $startTime = microtime(true);
        $success = $this->cacheService->flush();
        $endTime = microtime(true);

        if ($success) {
            $this->info('‚úÖ Cach√© limpiado exitosamente');
            $this->line('   Tiempo: ' . round(($endTime - $startTime) * 1000, 2) . 'ms');
        } else {
            $this->error('‚ùå Error al limpiar el cach√©');
            return Command::FAILURE;
        }

        return Command::SUCCESS;
    }

    private function showCacheInfo(): int
    {
        $this->info('üìä Informaci√≥n del sistema de cach√©');
        $this->newLine();

        $info = $this->cacheService->getCacheInfo();

        if ($info['status'] === 'error') {
            $this->error('‚ùå Error obteniendo informaci√≥n del cach√©: ' . $info['error']);
            return Command::FAILURE;
        }

        $data = [
            ['Driver', $info['driver']],
            ['Estado', $info['status']],
        ];

        if (isset($info['redis'])) {
            $data[] = ['--- Redis Info ---', ''];
            $data[] = ['Versi√≥n Redis', $info['redis']['version']];
            $data[] = ['Clientes conectados', $info['redis']['connected_clients']];
            $data[] = ['Memoria usada', $info['redis']['used_memory']];
            $data[] = ['Cache hits', number_format($info['redis']['keyspace_hits'])];
            $data[] = ['Cache misses', number_format($info['redis']['keyspace_misses'])];
            $data[] = ['Hit ratio', $info['redis']['hit_ratio'] . '%'];
        }

        $this->table(['M√©trica', 'Valor'], $data);

        return Command::SUCCESS;
    }

    private function showCacheStats(): int
    {
        $this->info('üìà Estad√≠sticas de uso del cach√©');
        $this->newLine();

        // Verificar si existen los cach√©s cr√≠ticos
        $cacheKeys = [
            'system_statistics' => 'Estad√≠sticas del sistema',
            'trd_active_data' => 'Datos TRD activos',
            'external_services_config' => 'Configuraci√≥n servicios externos',
        ];

        $stats = [];
        foreach ($cacheKeys as $key => $description) {
            $exists = Cache::has($key);
            $stats[] = [
                $description,
                $exists ? '‚úÖ En cach√©' : '‚ùå No cacheado',
                $exists ? 'N/A' : 'Considerar warmup'
            ];
        }

        $this->table(['Cach√©', 'Estado', 'Recomendaci√≥n'], $stats);

        // Mostrar configuraci√≥n TTL
        $this->newLine();
        $this->info('‚è∞ Configuraci√≥n de TTL (segundos)');
        
        $ttlConfig = config('optimization.cache.ttl', []);
        $ttlData = [];
        foreach ($ttlConfig as $type => $seconds) {
            $ttlData[] = [
                str_replace('_', ' ', ucfirst($type)),
                $seconds,
                $this->formatDuration($seconds)
            ];
        }

        $this->table(['Tipo de datos', 'TTL (segundos)', 'Duraci√≥n'], $ttlData);

        return Command::SUCCESS;
    }

    private function forgetUserCache(): int
    {
        $userId = $this->option('user-id');
        
        if (!$userId) {
            $this->error('‚ùå Debe proporcionar --user-id para esta operaci√≥n');
            return Command::FAILURE;
        }

        $this->info("üóëÔ∏è  Limpiando cach√© del usuario {$userId}...");
        
        $this->cacheService->forgetUserCache((int) $userId);
        
        $this->info('‚úÖ Cach√© del usuario limpiado exitosamente');
        return Command::SUCCESS;
    }

    private function forgetDocumentCache(): int
    {
        $documentId = $this->option('document-id');
        
        if (!$documentId) {
            $this->error('‚ùå Debe proporcionar --document-id para esta operaci√≥n');
            return Command::FAILURE;
        }

        $this->info("üóëÔ∏è  Limpiando cach√© del documento {$documentId}...");
        
        $this->cacheService->forgetDocumentCache((int) $documentId);
        
        $this->info('‚úÖ Cach√© del documento limpiado exitosamente');
        return Command::SUCCESS;
    }

    private function forgetByPattern(): int
    {
        $pattern = $this->option('pattern');
        
        if (!$pattern) {
            $this->error('‚ùå Debe proporcionar --pattern para esta operaci√≥n');
            return Command::FAILURE;
        }

        $this->info("üóëÔ∏è  Limpiando cach√© con patr√≥n '{$pattern}'...");
        
        $deleted = $this->cacheService->forgetByPattern($pattern);
        
        if ($deleted > 0) {
            $this->info("‚úÖ {$deleted} claves eliminadas exitosamente");
        } else {
            $this->warn('‚ö†Ô∏è  No se encontraron claves que coincidan con el patr√≥n');
        }

        return Command::SUCCESS;
    }

    private function formatDuration(int $seconds): string
    {
        if ($seconds < 60) {
            return "{$seconds}s";
        } elseif ($seconds < 3600) {
            $minutes = floor($seconds / 60);
            return "{$minutes}m";
        } else {
            $hours = floor($seconds / 3600);
            $minutes = floor(($seconds % 3600) / 60);
            return $minutes > 0 ? "{$hours}h {$minutes}m" : "{$hours}h";
        }
    }
}
